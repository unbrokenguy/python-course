name: coverage

on: [push]

jobs:
  coverage:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Start containers
        run: docker-compose -f docker-compose.test.yml up -d --build

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install Python dependencies
        run: |
          docker ps -a
          cd src
          python -m pip install --upgrade pip
          pip install poetry
          poetry export -f requirements.txt --output requirements.txt
          pip install -r requirements.txt
      - name: Coverage
        env:
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          CELERY_BROKER_URL: "redis://127.0.0.1:6379/0"
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          cd src
          export TEST=1
          coverage run -m pytest
          cp .coverage ../
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@master
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true

      - name: Stop containers
        if: always()
        run: docker-compose -f docker-compose.test.yml down
  deploy:
    name: Deploy
    needs: coverage
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        env:
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          ALLOWED_HOST: ${{ secrets.ALLOWED_HOST }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: EMAIL_HOST,EMAIL_HOST_PASSWORD,ALLOWED_HOST,SECRET_KEY,DB_USER,DB_PASSWORD,DB_NAME,DB_PORT
          script: |
            export EMAIL_HOST=$EMAIL_HOST
            export EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
            export ALLOWED_HOST=$ALLOWED_HOST
            export SECRET_KEY=$SECRET_KEY
            export DB_USER=$DB_USER
            export DB_PASSWORD=$DB_PASSWORD
            export DB_NAME=$DB_NAME
            export DB_PORT=$DB_PORT
            cd python-course
            git pull
            docker-compose up -d --build